=head1 Overview

partcl-nqp is a tcl 8.5 compiler for the PVM (Parrot Virtual Machine).

It uses the Parrot Compiler Toolkit (NQP-RX, HLL::Compiler) to generate
PIR (Parrot Assembly), which is then compiled to PBC (Parrot Bytecode),
which is then bundled into a "fakecutable".

=head1 Architecture

partcl-nqp is written primarily in NQP (Not Quite Perl 6; specifically
NQP-R), with some PIR.

=head2 Grammars and Actions

There are several Perl 6 Grammars in F<src/>; Partcl contains the main
language, src/ARE is the standard tcl regexes, etc.

Each Grammar.pm file contains the rules (See Perl 6's Synopsis 5) for
parsing that mini language. The Actions.pm file contains instructions to
convert the parse into parrot's AST (Abstract Syntax Tree). 

The small Compiler.pm for each mini language takes advantage of the parrot
library to convert the AST to an OST (opcode syntax tree), which is then
converted to PIR, and finally PBC.

=head1 Repository layout

=over 4

=item src/Partcl/

The grammar/actions for the language itself and for [expr].

=item src/Partcl/Operators.pm

Operators to override NQP's default behavior to be partcl-specific. Used
by [expr].

=item src/Partcl/Tcl*.pm

Override parrot's core types to conform to tcl behavior instead of parrot
defaults. For example, the string representation of [list a b] in parrot
is "2" (the size of the list); but in tcl is "a b".

=item src/Partcl/commands/

The Tcl builtins, e.g. for, puts, etc. Implemented in NQP. Any ensemble
commands have their own file, logical groupings (e.g. all list-related
commands) are bundled, with the remaining commands in main.pm

So we can generate our own diagnostic error messages, any user-facing
commands have an NQP function signature of C<*@> - however, especially for
the ensemble commands, several smaller commands with NQP-specific paramters
are used.

=item src/ARE

The grammar/actions for the regular expression engine.

=item src/StringGlob

The grammar/actions for [string match]

=item src/FileGlob

The grammar/actions for [glob]

=item library/

Portions of tcl's standard library - these files come directly from tcl's
CVS repository.

=item src/init.pm

Internal initialization - set global variables, etc.

=item src/options.pm

helper methods for processing options/autocompleting subcommands.

=item lib/test_more.tcl

A very small test harness written in tcl that generates TAP,
used to run the tests in t/; this is completely separate from tcltest.tcl,
which is tcl's own non-TAP test harness.

=item t/

Test files, written in tcl, run using lib/test_more.tcl ; While tcl does
have a suite of specification tests, it is very difficult for a new
implementation to run them directly; Our goal is to be able to run the
tests in this directory as a prelude to running the spec tests.

=back

=head1 Alternate history

There is a version of partcl written using PGE & TGE. That version has
no active development but is maintained minimally so it compiles with the
latest version of parrot. Much of I<this> version includes hand-translated
NQP based on the PIR from that version.

=cut

